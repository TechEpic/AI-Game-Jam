035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  1) using UnityEngine;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  2) 
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  3) // 8-directional movement script
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  4) // Entities with this script must also have a Rigidbody2D
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  5) // To control this, set the Movement variable in another script ABOVE this one
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  6) // Movement doesn't need to be normalized, it's just a direction
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  7) public class OctoMovement : MonoBehaviour {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  8) 
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700  9) 	// Self explanatory
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 10) 	public float Acceleration;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 11) 	public float Deceleration;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 12) 	public float MaxSpeed;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 13) 
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 14) 	// The direction that the entity wants to move in
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 15) 	[HideInInspector]
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 16) 	public Vector2 Movement;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 17) 	
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 18) 	Rigidbody2D rb;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 19) 
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 20) 	void Start() {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 21) 		// Get the rigid body object to add forces to
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 22) 		rb = gameObject.GetComponent<Rigidbody2D>();
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 23) 	}
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 24) 
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 25) 	void Update() {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 26) 		// No need to calculate this multiple times
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 27) 		float speed = rb.velocity.magnitude;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 28) 		bool isSlowing = true;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 29) 		// Determine if the player is accelerating in any direction
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 30) 		if(Movement.sqrMagnitude > 0) {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 31) 			isSlowing = false;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 32) 			// Apply the accelerating force
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 33) 			Movement = Movement.normalized * Acceleration;
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 34) 			rb.AddForce(Movement);
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 35) 		}
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 36) 		// Check if the player has exceeded the max speed
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 37) 		if(speed > MaxSpeed) {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 38) 			// Apply the acceleration force to cancel out acceleration that would put the player past the max speed
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 39) 			rb.AddForce(-rb.velocity / speed * Acceleration);
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 40) 			// Check if the player is decelerating
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 41) 		} else if(isSlowing && speed > 0) {
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 42) 			// Apply the decelerating force, capping it at the current velocity to prevent vibration
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 43) 			rb.AddForce(-rb.velocity / speed * Mathf.Min(Deceleration, speed / Time.deltaTime));
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 44) 		}
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 45) 	}
035c65ff (Joshua-Adler 2021-05-29 04:17:56 -0700 46) }
